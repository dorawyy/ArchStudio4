<%@ jet 
	imports="java.util.* \
	edu.uci.isr.myx2.eclipse.codegen.util.* \
	edu.uci.isr.myx2.eclipse.codegen.brick.* \
	edu.uci.isr.myx2.eclipse.codegen.codegen.BaseTemplateUtil \
	edu.uci.isr.myx2.eclipse.codegen.codegen.MyxCodegenConstants"  %>
<java:merge/>
<%
//	CodegenBrick brick = (CodegenBrick) argument;
	CodegenBrick brick = (CodegenBrick)context.getVariable(MyxCodegenConstants.JET2_TEMPLATE_VARIABLE_NAME_BRICK);
	String packageName = TextUtil.getPackagePart(brick.getFQBaseClassName());
	String className = TextUtil.getClassPart(brick.getFQBaseClassName());
%>
<% if (packageName != null && packageName.length() > 0) { 
%>
package <%=packageName%>;
<% }
%>

<%//java imports
    for( String javaImport : BaseTemplateUtil.getImports(brick)) {
%>
import <%=javaImport%>;
<%  }//end of additional java imports
%>

/**
 * Abstract base class of "<%=brick.getName()%>" brick.
 * <%=BaseTemplateUtil.getComment(brick.getDescription(), 0)%>
 * <p>
 * Following methods are called automatically by the Myx framework. 
 * Clients can override them as necessary.
 * <ul>
 * 	<li> init(): this brick is created</li>
 *	<li> begin(): this brick is attached to others via links.</li>
 *	<li> end(): this brick is detached.</li>
 *	<li> destroy(): this brick is destroyed. </li>
 * </ul>
 * </p>
 * The brick interface service object(s):
 *	<table border="1">
 *	<tr>
 *		<th>JavaInterface</th><th>service object</th>
 *		<th>brick interface name</th><th>direction</th><th>connection timing</th><th>template type</th>
 *	</tr>
<%   //in brickInterfaces
	 List<CodegenBrickInterface> inIntfs = new ArrayList<CodegenBrickInterface>();
	 inIntfs.addAll(brick.getInInterfaces()); // of this brick
	 inIntfs.addAll(brick.getAncesotrInInterfaces());// of ancestors' brick
     for(CodegenBrickInterface intf : inIntfs) {
%>
<%		//variables
		if(BaseTemplateUtil.isMyxVariable(intf)) {
%>
 *	<tr>
 *		<td><%=BaseTemplateUtil.getVariableType(intf)%></td><td><code><%=intf.getName()%></code></td>
 * 		<td><code><%=intf.getRawName()%></code></td><td><%=intf.getDirection().getSchemaDescription()%></td>
 *		<td><%=intf.getConnectionTiming().getSchemaDescription()%></td><td><%=intf.getTemplateType().getSchemaDescription()%></td>
 *	</tr>
<%		}
		//getter
		else if(BaseTemplateUtil.isMyxVariableGetter(intf)) {
%>
 *	<tr>
 *		<td><%=BaseTemplateUtil.getVariableType(intf)%></td><td><code><%=BaseTemplateUtil.getGetterMethodName(intf.getName())%>()</code></td>
 * 		<td><code><%=intf.getRawName()%></code></td><td><%=intf.getDirection().getSchemaDescription()%></td>
 *		<td><%=intf.getConnectionTiming().getSchemaDescription()%></td><td><%=intf.getTemplateType().getSchemaDescription()%></td>
 *	</tr>
<%		}
		//implemented
		else if (BaseTemplateUtil.isImplementedInClass(intf)) {
%>
 *	<tr>
 *		<td><%=BaseTemplateUtil.getVariableType(intf)%></td><td>this</td>
 * 		<td><code><%=intf.getRawName()%></code></td><td><%=intf.getDirection().getSchemaDescription()%></td>
 *		<td><%=intf.getConnectionTiming().getSchemaDescription()%></td><td><%=intf.getTemplateType().getSchemaDescription()%></td>
 *	</tr>
<%   	}
	 }// end of in brickInterfaces
%>
<% //out brickInterfaces
	List<CodegenBrickInterface> outIntfs = new ArrayList<CodegenBrickInterface>();
	outIntfs.addAll(brick.getOutInterfaces());//of this brick
	outIntfs.addAll(brick.getAncesotrOutInterfaces());// of ancestors' bricks
	for(CodegenBrickInterface intf : outIntfs) {
%>
<%	//variable
	if(BaseTemplateUtil.isMyxVariable(intf)) {
%>
 *	<tr>
 *		<td><%=BaseTemplateUtil.getVariableType(intf)%></td><td><code><%=intf.getName()%></code></td>
 *		<td><code><%=intf.getRawName()%></code></td><td><%=intf.getDirection().getSchemaDescription()%></td>
 *		<td><%=intf.getConnectionTiming().getSchemaDescription()%></td><td><%=intf.getTemplateType().getSchemaDescription()%></td>
 *	</tr>
<%		//proxy variables
    	if(BaseTemplateUtil.isProxyVariable(intf)) {
%>
 *	<tr>
 *		<td><%=BaseTemplateUtil.getProxyVariableType(intf)%></td><td><code><%=BaseTemplateUtil.getProxyVariableName(intf)%><code> as a proxy for <%=intf.getName()%></td>
 *	</tr>
<%  	}// end of proxy variables
	}//end of variable
%>
<%	//getter
	else if(BaseTemplateUtil.isMyxVariableGetter(intf)) {
%>
 *	<tr>
 *		<td><%=BaseTemplateUtil.getVariableType(intf)%></td><td><code><%=BaseTemplateUtil.getGetterMethodName(intf.getName())%>()</code></td>
 *		<td><code><%=intf.getRawName()%></code></td><td><%=intf.getDirection().getSchemaDescription()%></td>
 *		<td><%=intf.getConnectionTiming().getSchemaDescription()%></td><td><%=intf.getTemplateType().getSchemaDescription()%></td>
 *	</tr>
<%		//proxy getter
    	if(BaseTemplateUtil.isProxyVariableGetter(intf)) {
%>
 *	<tr>
 *		<td><%=BaseTemplateUtil.getProxyVariableType(intf)%></td><td><code><%=BaseTemplateUtil.getGetterMethodName(BaseTemplateUtil.getProxyVariableName(intf))%>()</code> as a proxy accessor for <code><%=intf.getName()%></code></td>
 *	</tr>
<%  	}// end of proxy getter
	}//end of variable
%>
<%
   }// end of out brickInterfaces
%>
 *	</table>
 * <p>
 * In order to prevent the myx code generator from overwriting the content of method, 
 * remove or change "@generated" annotation of java doc comment before re-run the generation.
 * </p>
 * @generated
 */
public abstract class <%=className%>
	<%=BaseTemplateUtil.getExtendsString(brick)%>
    <%=BaseTemplateUtil.getImplementsString(brick)%> {

<%  // IMyxNames of in-brick interfaces
    for(CodegenBrickInterface intf : brick.getInInterfaces()) {
%>
	
	/**
	 * Myx-interface name for <%=intf.getDirection().getSchemaDescription()%> <%=intf.getRawName()%>.  <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * <p>
	 * Through this IMyxName, other bricks can use services provided by <%=intf.getRawName()%> brick interface.
	 * </p>
	 * @generated
	 */
	public static final IMyxName <%=BaseTemplateUtil.getInMyxName(intf)%> = MyxUtils.createName("<%=intf.getId()%>");
<%  }
%>

<%  // IMyxNames of out-brick interfaces
    for(CodegenBrickInterface intf : brick.getOutInterfaces()) {
%>

	/**
	 * Myx-interface name for <%=intf.getDirection().getSchemaDescription()%> <%=intf.getRawName()%>.  <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * <p>
	 * Through this IMyxName, this brick can use services reached through <%=intf.getRawName()%> brick interface.
	 * </p>
	 * @generated
	 */
	public static final IMyxName <%=BaseTemplateUtil.getOutMyxName(intf)%> = MyxUtils.createName("<%=intf.getId()%>");

<%  }
%>
<% // in-brick interface variables
   for(CodegenBrickInterface intf : BaseTemplateUtil.getInMyxVariables(brick)) {
%>

	/**
	 * the service object for <%=intf.getDirection().getSchemaDescription()%> <code><%=intf.getRawName()%></code>. <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * @generated
	 */
	protected <%=intf.getSimpleJavaInterfaceName()%> <%=intf.getName()%> = null;
			
<% 
   }// end of in-brick interface variables
%>
<% // in-brick interface variables getter
   for(CodegenBrickInterface intf : BaseTemplateUtil.getInMyxVariablesGetter(brick)) {
%>

	/**
	 * Returns the service object for <%=intf.getDirection().getSchemaDescription()%> <%=intf.getRawName()%>.  <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * @generated
	 */
	abstract protected <%=intf.getSimpleJavaInterfaceName()%> <%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>();
			
<% 
   }// end of in-brick interface variables getter
%>
<%  // out-multi brick interfaces variables
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutMultiMyxVariables(brick)) {
%>

	/**
	 *  the collection of service objects for <%=intf.getDirection().getSchemaDescription()%> <code><%=intf.getRawName()%></code>. <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * @generated
	 */
	protected Collection<<%=intf.getSimpleJavaInterfaceName()%>> <%=intf.getName()%> = new ArrayList<<%=intf.getSimpleJavaInterfaceName()%>>();	
<%   } // end of out-multi brick interfaces variables
%>
<%  // out-multi brick interfaces getter
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutMultiMyxVariablesGetter(brick)) {
%>

	/**
	 *  Returns the collection of service objects for <%=intf.getDirection().getSchemaDescription()%> <%=intf.getRawName()%>. <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * @generated
	 */
	abstract protected Collection<<%=intf.getSimpleJavaInterfaceName()%>> <%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>();
<%   } // end of out-multi brick interfaces getter
%>	
<%  // out-single brick interfaces variables
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutSingleMyxVariables(brick)) {
%>

	/**
	 * the service object for <%=intf.getDirection().getSchemaDescription()%> <code><%=intf.getRawName()%></code>. <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * @generated
	 */
	protected <%=intf.getSimpleJavaInterfaceName()%> <%=intf.getName()%> = null;
<%  }// end of out-single brick interfaces variables
%>
<%  // out-single brick interfaces getter/setter
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutSingleMyxVariablesGetter(brick)) {
%>

	/**
	 * Returns the service object for <%=intf.getDirection().getSchemaDescription()%> <%=intf.getRawName()%>. <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * @generated
	 */
	abstract protected <%=intf.getSimpleJavaInterfaceName()%> <%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>();
	/**
	 * Sets the service object for <%=intf.getDirection().getSchemaDescription()%> <%=intf.getRawName()%>. <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * @generated
	 */
	 abstract protected void <%=BaseTemplateUtil.getSetterMethodName( intf.getName())%>(<%=intf.getSimpleJavaInterfaceName()%> <%=intf.getName()%>);
	
<%  }// end of out-single brick interfaces getter/setter
%>

<%  // Proxy adapters
	for(Collection<CodegenBrickInterface> intfs : BaseTemplateUtil.getProxyAdapters(brick)) {
		
		//a representative brick interface 
		Iterator<CodegenBrickInterface> it = intfs.iterator();
		CodegenBrickInterface repSig = it.next();
%>
	/**
	 * Proxy adapter class of <%=repSig.getSimpleJavaInterfaceName()%> interface.
	 *	<table border="1">
	 *	<tr>
	 *		<th>direction</th>
	 *		<th>connection timing</th>
	 *		<th>template type</th>
	 *	</tr>
	 *	<tr>
	 * 		<td><%=repSig.getDirection().getSchemaDescription()%></td>
	 *		<td><%=repSig.getConnectionTiming().getSchemaDescription()%></td>
	 * 		<td><%=repSig.getTemplateType().getSchemaDescription()%></td>
	 *	</tr>
	 *	</table>
	 * This class plays a proxy role for a collection of service objects that
	 * implement the interface. 
	 * @generated
	 */
	protected abstract class <%=BaseTemplateUtil.getProxyAdapterName(repSig)%>
					<%=(repSig.isJavaInterface())? "implements" : "extends" %> <%=repSig.getSimpleJavaInterfaceName()%> {
		
		/**
		 * A collection of service objects whose void methods will be invoked through this class
		 */			
		protected Collection<<%=repSig.getSimpleJavaInterfaceName()%>> serviceObjects;
		
		/**
		 * Constructs a proxy class with the given collection of service objects.
		 */
		<%=BaseTemplateUtil.getProxyAdapterName(repSig)%>(Collection<<%=repSig.getSimpleJavaInterfaceName()%>> serviceObjects) {
			this.serviceObjects = serviceObjects;
		}
<%      //common void methods
		for( MethodContainer method : repSig.getJavaInterfaceVoidMethods()){
%>
			
		/* (non-Javadoc)
		 * 
		 * @see <%=repSig.getSimpleJavaInterfaceName()%>#<%=method.getMethodName()%>(<%=method.toParamsSimpleString()%>)
		 */
		/**
		 * @generated
		 */
		<%=method.toSimpleString()%>{
			for (<%=repSig.getSimpleJavaInterfaceName()%> o : serviceObjects ) {
				o.<%=method.getMethodName()%>(<%=method.toParamNamesString()%>);
			}
		}
<%		} // end of common void methods
%>
	}
<%		//proxy variables
        for(CodegenBrickInterface intf : intfs) {
%>
	/**
	 * Creates a <%=intf.getSimpleJavaInterfaceName()%> proxy for <code><%=intf.getRawName()%></code>. <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * Non-void methods of the interface should be inplemented in the extended class.
	 * @generated
	 */
	protected abstract <%=intf.getSimpleJavaInterfaceName()%> <%=BaseTemplateUtil.getCreateProxyMethodName(intf)%>();
	

<%			if(BaseTemplateUtil.isProxyVariable(intf)) {
			//variable
%>

	/**
	 * the <%=intf.getSimpleJavaInterfaceName()%> proxy for <code><%=intf.getRawName()%></code>. <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * @generated
	 */
	protected <%=intf.getSimpleJavaInterfaceName()%> <%=BaseTemplateUtil.getProxyVariableName(intf)%> = <%=BaseTemplateUtil.getCreateProxyMethodName(intf)%>();
		//new <%=BaseTemplateUtil.getProxyAdapterName(intf)%>(<%=intf.getName()%>);
<%			} else {
			//setter/getter
%>
	/**
	 * Gets the <%=intf.getSimpleJavaInterfaceName()%> proxy for <code><%=intf.getRawName()%></code>. <%=BaseTemplateUtil.getComment(intf.getDescription(), 1)%>
	 * @generated
	 */
	abstract protected <%=intf.getSimpleJavaInterfaceName()%> <%=BaseTemplateUtil.getGetterMethodName(BaseTemplateUtil.getProxyVariableName(intf))%>();

<%			}
		} // end of proxy variables
	} // end of Proxy adapters
%>



	/**
	 * @generated
	 */
	class PreMyxLifecycleProcessor extends MyxLifecycleAdapter {
		
		/**
		 * @generated
		 */
		@Override
		public void init() {
			// connectBeforeInit
<% 	  // preMyxLifecycleInit variables
	for(CodegenBrickInterface intf : BaseTemplateUtil.getPreMyxLifecycleInitVariables(brick)) {
%>
			if(<%=intf.getName()%> == null) {
				throw new IllegalArgumentException("<%=intf.getName()%> must be assigned a value (i.e., the interface must be connected) before calling init()");
			}
<%		//proxy variable
        if(BaseTemplateUtil.isProxyVariable(intf)) {
%>			
			if(<%=BaseTemplateUtil.getGetterMethodName(BaseTemplateUtil.getProxyVariableName(intf))%>() == null) {
				<%=BaseTemplateUtil.getSetterMethodName(BaseTemplateUtil.getProxyVariableName(intf))%>(<%=BaseTemplateUtil.getCreateProxyMethodName(intf)%>());
			}
<%	  	 } // end of proxy variable
	}// end of preMyxLifecycleInit variables
	
	// preMyxLifecycleInit variables getter
	for(CodegenBrickInterface intf : BaseTemplateUtil.getPreMyxLifecycleInitVariablesGetter(brick)) {
%>
			if(<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%> == null) {
				throw new IllegalArgumentException("<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%> must return non-null value " 
				+ "(i.e., the interface must be connected before) calling init()");
			}
<%
	}// end of preMyxLifecycleInit variables getter
%>
		}
		
		/**
		 * @generated
		 */
		@Override
		public void begin() {
			// connectBeforeBegin 
<%	 //preMyxLifecycleBegin variables
     for(CodegenBrickInterface intf : BaseTemplateUtil.getPreMyxLifecycleBeginVariables(brick)) {
%>

			if(<%=intf.getName()%> == null) {
				throw new IllegalArgumentException("<%=intf.getName()%> must be assigned a value before calling begin()");
			}
<%		
	}// end of preMyxLifecycleBegin variables
	
	//preMyxLifecycleBegin getters 
	for(CodegenBrickInterface intf : BaseTemplateUtil.getPreMyxLifecycleBeginVariablesGetter(brick)) {
%>
			if(<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>() == null) {
				throw new NullPointerException("<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>() service object is null.");
			}
<%	 }// end of preMyxLifecycleBegin getter
%>
		}
	}			
	
<%  // constructors when parent is specified
	if( brick.hasParentBrick() ) {
		for(MethodContainer constructor : BaseTemplateUtil.getConstructors(brick)) {
%>
	/**
	 * @generated
	 */
	<%=constructor.getModifiers()%> <%=className%>(<%=constructor.toParamsSimpleString()%>) {
		
		super(<%=constructor.toParamNamesString()%>);
		
		addPreMyxLifecycleProcessor(new PreMyxLifecycleProcessor());
	}
<%		}
	}// end of constructors when parent is specified
	else {
%>
	/**
	 * @generated
	 */
	public <%=className%>(){
	
		myxLifecycleProcessors.add(this);
		addPreMyxLifecycleProcessor(new PreMyxLifecycleProcessor());
	}

<%	}
%>
	
<%  // implemented methods of out brick interfaces
    for(CodegenBrickInterface repSig : BaseTemplateUtil.getImplMethodOut(brick)) {
    	//methods
	  	for(MethodContainer method : repSig.getJavaInterfaceVoidMethods()) {
%>
	
	/* (non-Javadoc)
	 * @see <%=repSig.getFQJavaInterfaceName()%>#<%=method.getMethodName()%>(<%=method.toParamsSimpleString()%>)
	 */
	/**
	 * @generated
	 */
	<%=method.toSimpleString()%>{

<%			//checks all the out brick interfaces
			for(CodegenBrickInterface intf : brick.getOutInterfaces()) {
%>
<%				//multi out variable
				if(BaseTemplateUtil.isOutMultiMyxVariable(intf)) {
%>
		//multiple out
		for(<%=intf.getSimpleJavaInterfaceName()%> o: <%=intf.getName()%>){
			o.<%=method.getMethodName()%>(<%=method.toParamNamesString()%>);
		}
<%				//multi out getter
				} else if(BaseTemplateUtil.isOutMultiMyxVariableGetter(intf)) {
%>
		//multiple out getter
		for(<%=intf.getSimpleJavaInterfaceName()%> o: <%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>()){
			o.<%=method.getMethodName()%>(<%=method.toParamNamesString()%>);
		}
<%				//out single variable
				}else if(BaseTemplateUtil.isOutSingleMyxVariable(intf)) {
%>
		//single out
		<%=intf.getName()%>.<%=method.getMethodName()%>(<%=method.toParamNamesString()%>);
<%				//out single getter
				} else if(BaseTemplateUtil.isOutSingleMyxVariableGetter(intf)) {
%>
		//single out getter
		<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>().<%=method.getMethodName()%>(<%=method.toParamNamesString()%>);
<%				}//end of getter
			}// end of checks all the out brick interfaces
%>
	}
<%		}//methods
    }// end of implemented methods of out brick interfaces
%>
	/* (non-Javadoc)
	 * @see edu.uci.isr.myx2.fw.IMyxDynamicBrick#interfaceConnected(edu.uci.isr.myx2.fw.IMyxName, java.lang.Object)
	 */
	/**
	 * @generated
	 */
	public synchronized void interfaceConnected(IMyxName interfaceName, Object serviceObject){
		
<%  //out-multi variables getter
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutMultiMyxVariablesGetter(brick)) {
%>

		if(<%=BaseTemplateUtil.getOutMyxName(intf)%>.equals(interfaceName)){

			if(<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>().contains(serviceObject)) {
				throw new IllegalArgumentException("Interface <%=intf.getName()%>  already connected.");
			} 
			// adds the serviceObject to <%=intf.getName()%> 
			<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>().add((<%=intf.getSimpleJavaInterfaceName()%>)serviceObject);
			return;
		}
<%  } // end of out-multi variables
%>
<%  //out-multi variables
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutMultiMyxVariables(brick)) {
%>

		if(<%=BaseTemplateUtil.getOutMyxName(intf)%>.equals(interfaceName)){

			if(<%=intf.getName()%>.contains(serviceObject)) {
				throw new IllegalArgumentException("Interface <%=intf.getName()%> already connected.");
			} 
			// adds the serviceObject to <%=intf.getName()%>  
			<%=intf.getName()%>.add((<%=intf.getSimpleJavaInterfaceName()%>)serviceObject);
			return;
		}
<%  } // end of out-multi variables
%>
<%  // out-single variables getter/setter
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutSingleMyxVariablesGetter(brick)) {
%>

		if(<%=BaseTemplateUtil.getOutMyxName(intf)%>.equals(interfaceName)){

			if(<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>() != null) {
				throw new IllegalArgumentException("<%=intf.getName()%> is already connected.");
			}
			// sets the serviceObject to <%=intf.getName()%>
			<%=BaseTemplateUtil.getSetterMethodName( intf.getName())%>((<%=intf.getSimpleJavaInterfaceName()%>)serviceObject);
			return;
		}
<%   } // end of out-single variables getter/setter
%>
<%  // out-single variables
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutSingleMyxVariables(brick)) {
%>

		if(<%=BaseTemplateUtil.getOutMyxName(intf)%>.equals(interfaceName)){

			if(<%=intf.getName()%> != null) {
				throw new IllegalArgumentException("<%=intf.getName()%> is already connected.");
			}
			// sets the serviceObject to <%=intf.getName()%> 
			<%=intf.getName()%> = (<%=intf.getSimpleJavaInterfaceName()%>)serviceObject;
			return;
		}
<%   } // end of out-single variables
%>
		<%=(brick.hasParentBrick())? "super.interfaceConnected(interfaceName, serviceObject);" : ""%>
	}

	/* (non-Javadoc)
	 * @see edu.uci.isr.myx.fw.IMyxDynamicBrick#interfaceDisconnecting(edu.uci.isr.myx.fw.IMyxName, java.lang.Object)
	 */
	/**
	 * @generated
	 */
	public synchronized void interfaceDisconnecting(IMyxName interfaceName, Object serviceObject){
<%  //out-multi variables getter
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutMultiMyxVariablesGetter(brick)) {
%>

		if(<%=BaseTemplateUtil.getOutMyxName(intf)%>.equals(interfaceName)){

			if(!<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>().contains(serviceObject)) {
				throw new IllegalArgumentException("Interface <%=intf.getName()%> was not previously connected.");
			} 
			// removes the serviceObject
			<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>().remove(serviceObject);
			return;
		}
<%  } // end of out-multi variables getter
%>
<%  //out-multi variables
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutMultiMyxVariables(brick)) {
%>

		if(<%=BaseTemplateUtil.getOutMyxName(intf)%>.equals(interfaceName)){

			if(!<%=intf.getName()%>.contains(serviceObject)) {
				throw new IllegalArgumentException("Interface <%=intf.getName()%> was not previously connected.");
			} 
			// removes the serviceObject
			<%=intf.getName()%>.remove(serviceObject);
			return;
		}
<%  } // end of out-multi variables
%>
<%  // out-single variables getter/setter
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutSingleMyxVariablesGetter(brick)) {
%>

		if(<%=BaseTemplateUtil.getOutMyxName(intf)%>.equals(interfaceName)){
			if(<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>() == null) {
				throw new IllegalArgumentException("<%=intf.getName()%> was not previously connected.");
			}
			// removes the serviceObject
			<%=BaseTemplateUtil.getSetterMethodName(intf.getName())%>(null);
			return;
		}
<% }// end of out-single variables getter/setter
%>
<%  // out-single variables
    for(CodegenBrickInterface intf : BaseTemplateUtil.getOutSingleMyxVariables(brick)) {
%>

		if(<%=BaseTemplateUtil.getOutMyxName(intf)%>.equals(interfaceName)){
			if(<%=intf.getName()%> == null) {
				throw new IllegalArgumentException("<%=intf.getName()%> was not previously connected.");
			}
			// removes the serviceObject
			<%=intf.getName()%> = null;
			return;
		}
<% }// end of out-single variables
%>
		<%=(brick.hasParentBrick())? "super.interfaceDisconnecting(interfaceName, serviceObject);" : ""%>
	}

	/* (non-Javadoc)
	 * @see edu.uci.isr.myx.fw.IMyxDynamicBrick#interfaceDisconnected(edu.uci.isr.myx.fw.IMyxName, java.lang.Object)
	 */
	/**
	 * @generated
	 */
	public void interfaceDisconnected(IMyxName interfaceName, Object serviceObject){
		<%=(brick.hasParentBrick())? "super.interfaceDisconnected(interfaceName, serviceObject);" : ""%>
	}
	
	/* (non-Javadoc)
	 * @see edu.uci.isr.myx.fw.IMyxProvidedServiceProvider#getServiceObject(edu.uci.isr.myx.fw.IMyxName)
	 */
	/**
	 * @generated
	 */
	public Object getServiceObject(IMyxName interfaceName){

<%  //getServiceObject variables
    for(CodegenBrickInterface intf : BaseTemplateUtil.getGetServiceObjectVariables(brick)) {
%>
		if(<%=BaseTemplateUtil.getInMyxName(intf)%>.equals(interfaceName)){

<%      //in variable
        if(BaseTemplateUtil.isInMyxVariable(intf)) {
%>
			if(<%=intf.getName()%> == null) {
				throw new NullPointerException("<%=intf.getName()%> service object is null.");
			}
			return <%=intf.getName()%>;
<%		//in variable getter
		} else if (BaseTemplateUtil.isInMyxVariableGetter(intf)) {
%>
			if(<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>() == null) {
				throw new NullPointerException("<%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>() service object is null.");
			}
			return <%=BaseTemplateUtil.getGetterMethodName( intf.getName())%>();
<%      } else {
		// we will return this object
%>
			return this;
<%      } 
%>
		}
<%  } // end of getServiceObject variables
%>
		<%=(brick.hasParentBrick())? "return super.getServiceObject(interfaceName);" : "return null;"%>
	}

<%if(BaseTemplateUtil.shouldCreateMyxRegistry(brick)) {%>
	/**
	 * The myx registry, which contains all objects interested in events from this brick.
	 * @generated
	 */
	MyxRegistry myxr = MyxRegistry.getSharedInstance();

<%
	for(CodegenBrickInterface intf : BaseTemplateUtil.getImplMethodDelegateToMyxRegistry(brick)) {
		// only handle void methods
		for( MethodContainer method : intf.getJavaInterfaceVoidMethods()) {
%>			
	/**
	 * Implementation of <%=intf.getRawName()%>.
	 *	<table border="1">
	 *	<tr>
	 *		<th>direction</th>
	 *		<th>connection timing</th>
	 *		<th>template type</th>
	 *	</tr>
	 *	<tr>
	 * 		<td><%=intf.getDirection().getSchemaDescription()%></td>
	 *		<td><%=intf.getConnectionTiming().getSchemaDescription()%></td>
	 * 		<td><%=intf.getTemplateType().getSchemaDescription()%></td>
	 *	</tr>
	 *	</table>
	 * @see <%=intf.getSimpleJavaInterfaceName()%>#<%=method.getMethodName()%>(<%=method.toParamsSimpleString()%>)
	 * @generated
	 */
	<%=method.toSimpleString()%>{
		for(<%=intf.getSimpleJavaInterfaceName()%> o: myxr.getObjects(this, <%=intf.getSimpleJavaInterfaceName()%>.class)){
			try{
				o.<%=method.getMethodName()%>(<%=method.toParamNamesString()%>);
			}
			catch(Throwable t){
				// TODO: Handle exceptions better.
				t.printStackTrace();
			}
		}
	}
<%
		}
	}
}
%>

	/* (non-Javadoc)
	 * @see edu.uci.isr.myx.fw.IMyxLifecycleProcessor#begin()
	 */
	/**
	 * @generated
	 */
	public void begin() {
		<%=(brick.hasParentBrick())? "super.begin();" : ""%>
		<%if(BaseTemplateUtil.shouldCreateMyxRegistry(brick)){%>
			myxr.register(this);
		<%}%>
	}

	/* (non-Javadoc)
	 * @see edu.uci.isr.myx.fw.IMyxLifecycleProcessor#destroy()
	 */
	/**
	 * @generated
	 */
	public void destroy() {
		<%=(brick.hasParentBrick())? "super.destroy();" : ""%>
	}

	/* (non-Javadoc)
	 * @see edu.uci.isr.myx.fw.IMyxLifecycleProcessor#end()
	 */
	/**
	 * @generated
	 */
	public void end() {
		<%if(BaseTemplateUtil.shouldCreateMyxRegistry(brick)){%>
			myxr.unregister(this);
		<%}%>
		<%=(brick.hasParentBrick())? "super.end();" : ""%>
	}

	/* (non-Javadoc)
	 * @see edu.uci.isr.myx.fw.IMyxLifecycleProcessor#init()
	 */
	/**
	 *   
<%  //variables that will be avaialble in init()
    Collection<CodegenBrickInterface> intfsForInitAvailable = BaseTemplateUtil.getInitAvailableVariables(brick);
    if(!intfsForInitAvailable.isEmpty() ) {
%>
	 * The following variable(s) will be assigned values before this method is called.
	 * <ul>			
<%		for(CodegenBrickInterface intf : intfsForInitAvailable) {
%>
	 *  <li>{@link #<%=intf.getName()%>}</li>
<%			//proxy variables
		    if(BaseTemplateUtil.isProxyVariable(intf)) {
%>
	 *	<li>{@link #<%=BaseTemplateUtil.getProxyVariableName(intf)%>} for a proxy of {@link #<%=intf.getName()%>}</li>
<%  		}// end of proxy variables
		} // end of for(CodegenBrickInterface _
%>
	 * </ul>	
<%  } // end of if(!intfsForInitAvailable.isEmpty() 
%>
<%  //methods that will be avaialble in init()
    intfsForInitAvailable = BaseTemplateUtil.getInitAvailableGetters(brick);
    if(!intfsForInitAvailable.isEmpty() ) {
%>
	 * The following method(s) will be assigned values before this method is called.
	 * <ul>			
<%		for(CodegenBrickInterface intf : intfsForInitAvailable) {
%>
	 *  <li>{@link #<%=BaseTemplateUtil.getGetterMethodName(intf.getName())%>}()</li>
<%			//proxy variables
		    if(BaseTemplateUtil.isProxyVariable(intf)) {
%>
	 *	<li>{@link #<%=BaseTemplateUtil.getGetterMethodName(BaseTemplateUtil.getProxyVariableName(intf))%>}() 
	 for a proxy of {@link #<%=BaseTemplateUtil.getGetterMethodName(intf.getName())%>}</li>
<%  		}// end of proxy variables
		} // end of for(CodegenBrickInterface _
%>
	 * </ul>	
<%  } // end of if(!intfsForInitAvailable.isEmpty() 
%>
<%
    //variables that must be assigned values in init()
    Collection<CodegenBrickInterface> intfsForInitAssign = BaseTemplateUtil.getInitAssignVariables(brick);
    if(!intfsForInitAssign.isEmpty() ) {
%>
	 * The following variable(s) must be assigned values before this method exits.
	 * <ul>
<%		for(CodegenBrickInterface intf : intfsForInitAssign) {
%>
	 *  <li>{@link #<%=intf.getName()%>}</li>
<%		}
%>
	 * </ul>	
<%  }// end of if(!intfsForInitAssign.isEmpty() 
%>
<%
    //mthods that must be assigned to return values in init()
    intfsForInitAssign = BaseTemplateUtil.getInitAssignMethods(brick);
    if(!intfsForInitAssign.isEmpty() ) {
%>
	 * The following method(s) must be assigned to return values before this method exits.
	 * <ul>
<%		for(CodegenBrickInterface intf : intfsForInitAssign) {
%>
	 *  <li>{@link #<%=BaseTemplateUtil.getGetterMethodName(intf.getName())%>}()</li>
<%		}
%>
	 * </ul>	
<%  }// end of if(!intfsForInitAssign.isEmpty() 
%>
	 * @generated
	 */
	public void init() {
		<%=(brick.hasParentBrick())? "super.init();" : ""%>
	}
	
	
<%
	//brick is not extending another brick
	if(!brick.hasParentBrick()) {
%>
	
	/**
	 * A list of lifecycle processors. The order of method calling is
	 * <ol>
	 *  <li>PreMyxLifecycleProcessor#init()</li>
	 *  <li>this.init()</li>
	 *  <li>PreMyxLifecycleProcessor#begin()</li>
	 *  <li>this.begin()</li>
	 *  <li>PreMyxLifecycleProcessor#end()</li>
	 *  <li>this.end()</li>
	 *  <li>PreMyxLifecycleProcessor#destroy()</li>
	 *  <li>this.destroy()</li>
	 * @generated
	 */
	private final List<IMyxLifecycleProcessor> myxLifecycleProcessors = new ArrayList<IMyxLifecycleProcessor>();

	/**
	 * Adds a preMyxLifecycleProcessor
	 * @param preMyxLifecycleProcessor
	 */
	protected void addPreMyxLifecycleProcessor(IMyxLifecycleProcessor preMyxLifecycleProcessor) {
		
		// inserts a preMyxLifecycleProcessor into the head of the list
		this.myxLifecycleProcessors.add(0, preMyxLifecycleProcessor);
	}
	
	/**
	 * @generated
	 */
	private IMyxBrickItems brickItems = null;
	

	/* (non-Javadoc)
	 * @see edu.uci.isr.myx.fw.IMyxBrick#setMyxBrickItems()
	 */
	/**
	 * @generated
	 */
	public final void setMyxBrickItems(IMyxBrickItems brickItems){
		this.brickItems = brickItems;
	}
	
	/* (non-Javadoc)
	 * @see edu.uci.isr.myx.fw.IMyxBrick#setMyxBrickItems()
	 */
	/**
	 * @generated
	 */
	public final IMyxBrickItems getMyxBrickItems(){
		return brickItems;
	}
	
	/* (non-Javadoc)
	 * @see edu.uci.isr.myx.fw.IMyxBrick#getLifecycleProcessors()
	 */
	/**
	 * @generated
	 */
	public final IMyxLifecycleProcessor[] getLifecycleProcessors(){
		return myxLifecycleProcessors.toArray(new IMyxLifecycleProcessor[myxLifecycleProcessors.size()]);
	}

	/* (non-Javadoc)
	 * @see edu.uci.isr.myx.fw.IMyxBrick#getProvidedServiceProvider()
	 */
	/**
	 * @generated
	 */
	public final IMyxProvidedServiceProvider getProvidedServiceProvider(){
		return this;
	}
<%
	}
	//end of brick is not extending another brick
%>

}