/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.activitydiagramsspecial;

import org.w3c.dom.*;

import edu.uci.isr.xarch.*;

import java.util.*;

/**
 * DOM-Based implementation of the IActivityDiagram interface.
 *
 * @author Automatically generated by xArch apigen.
 */
public class ActivityDiagramImpl extends edu.uci.isr.xarch.uml212superstructure.ActivityDiagramImpl implements
IActivityDiagram, edu.uci.isr.xarch.uml212superstructure.IActivityDiagram, DOMBased{
	
	public static final String XSD_TYPE_NSURI = ActivitydiagramsspecialConstants.NS_URI;
	public static final String XSD_TYPE_NAME = "ActivityDiagram";

	/** Tag name for notes in this object. */
	public static final String NOTE_ELT_NAME = "note";
	/** Tag name for actors in this object. */
	public static final String ACTOR_ELT_NAME = "actor";
	/** Tag name for activityDiagramReferences in this object. */
	public static final String ACTIVITY_DIAGRAM_REFERENCE_ELT_NAME = "activityDiagramReference";

	
	private static SequenceOrder seqOrderAppend = new SequenceOrder(
		new QName[]{
			new QName(ActivitydiagramsspecialConstants.NS_URI, NOTE_ELT_NAME),
			new QName(ActivitydiagramsspecialConstants.NS_URI, ACTOR_ELT_NAME),
			new QName(ActivitydiagramsspecialConstants.NS_URI, ACTIVITY_DIAGRAM_REFERENCE_ELT_NAME)
		}
	);
	
	public ActivityDiagramImpl(Element elt){
		super(elt);
	}
	
	protected static SequenceOrder getSequenceOrder(){
		return new SequenceOrder(edu.uci.isr.xarch.uml212superstructure.ActivityDiagramImpl.getSequenceOrder(), seqOrderAppend);
	}

	public IXArchElement cloneElement(int depth){
		synchronized(DOMUtils.getDOMLock(elt)){
			Document doc = elt.getOwnerDocument();
			if(depth == 0){
				Element cloneElt = (Element)elt.cloneNode(false);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				ActivityDiagramImpl cloneImpl = new ActivityDiagramImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				return cloneImpl;
			}
			else if(depth == 1){
				Element cloneElt = (Element)elt.cloneNode(false);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				ActivityDiagramImpl cloneImpl = new ActivityDiagramImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				
				NodeList nl = elt.getChildNodes();
				int size = nl.getLength();
				for(int i = 0; i < size; i++){
					Node n = nl.item(i);
					Node cloneNode = (Node)n.cloneNode(false);
					cloneNode = doc.importNode(cloneNode, true);
					cloneElt.appendChild(cloneNode);
				}
				return cloneImpl;
			}
			else /* depth = infinity */{
				Element cloneElt = (Element)elt.cloneNode(true);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				ActivityDiagramImpl cloneImpl = new ActivityDiagramImpl(cloneElt);
				cloneImpl.setXArch(getXArch());
				return cloneImpl;
			}
		}
	}

	/**
	 * For internal use only.
	 */
	private static Object makeDerivedWrapper(Element elt, String baseTypeName){
		synchronized(DOMUtils.getDOMLock(elt)){
			QName typeName = XArchUtils.getXSIType(elt);
			if(typeName == null){
				return null;
			}
			else{
				if(!DOMUtils.hasXSIType(elt, "http://www.ics.uci.edu/pub/arch/xArch/activitydiagramsspecial.xsd", baseTypeName)){
					try{
						String packageTitle = XArchUtils.getPackageTitle(typeName.getNamespaceURI());
						String packageName = XArchUtils.getPackageName(packageTitle);
						String implName = XArchUtils.getImplName(packageName, typeName.getName());
						Class c = Class.forName(implName);
						java.lang.reflect.Constructor con = c.getConstructor(new Class[]{Element.class});
						Object o = con.newInstance(new Object[]{elt});
						return o;
					}
					catch(Exception e){
						//Lots of bad things could happen, but this
						//is OK, because this is best-effort anyway.
					}
				}
				return null;
			}
		}
	}

	public XArchTypeMetadata getTypeMetadata(){
		return IActivityDiagram.TYPE_METADATA;
	}

	public XArchInstanceMetadata getInstanceMetadata(){
		return new XArchInstanceMetadata(XArchUtils.getPackageTitle(elt.getNamespaceURI()));
	}
	public void addNote(INote newNote){
		if(!(newNote instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newNote).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, ActivitydiagramsspecialConstants.NS_URI, NOTE_ELT_NAME);
		((DOMBased)newNote).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"note", newNote,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addNotes(Collection notes){
		for(Iterator en = notes.iterator(); en.hasNext(); ){
			INote elt = (INote)en.next();
			addNote(elt);
		}
	}		
		
	public void clearNotes(){
		//DOMUtils.removeChildren(elt, ActivitydiagramsspecialConstants.NS_URI, NOTE_ELT_NAME);
		Collection coll = getAllNotes();
		removeNotes(coll);
	}
	
	public void removeNote(INote noteToRemove){
		if(!(noteToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, ActivitydiagramsspecialConstants.NS_URI, NOTE_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)noteToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"note", noteToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeNotes(Collection notes){
		for(Iterator en = notes.iterator(); en.hasNext(); ){
			INote elt = (INote)en.next();
			removeNote(elt);
		}
	}
	
	public Collection getAllNotes(){
		NodeList nl = DOMUtils.getChildren(elt, ActivitydiagramsspecialConstants.NS_URI, NOTE_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((INote)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "Note");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((INote)o);
					}
					catch(Exception e){
						NoteImpl eltImpl = new NoteImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					NoteImpl eltImpl = new NoteImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasNote(INote noteToCheck){
		Collection c = getAllNotes();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			INote elt = (INote)en.next();
			if(elt.isEquivalent(noteToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasNotes(Collection notesToCheck){
		Vector v = new Vector();
		for(Iterator en = notesToCheck.iterator(); en.hasNext(); ){
			INote elt = (INote)en.next();
			v.addElement(new Boolean(hasNote(elt)));
		}
		return v;
	}
		
	public boolean hasAllNotes(Collection notesToCheck){
		for(Iterator en = notesToCheck.iterator(); en.hasNext(); ){
			INote elt = (INote)en.next();
			if(!hasNote(elt)){
				return false;
			}
		}
		return true;
	}
	public INote getNote(String id){
		NodeList nl = DOMUtils.getChildren(elt, ActivitydiagramsspecialConstants.NS_URI, NOTE_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			
			INote el = new NoteImpl((Element)nl.item(i));
			if(DOMUtils.objNullEq(id, el.getId())){
				Element domElt = (Element)nl.item(i);
				Object o = makeDerivedWrapper(domElt, "Note");
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						return (INote)o;
					}
					catch(Exception e){}
				}
				el.setXArch(getXArch());
				return el;
			}
		}
		return null;
	}
	
	public Collection getNotes(Collection ids){
		//If there is an ID that does not exist, it is simply ignored.
		//You can tell if this happened if ids.size() != returned collection.size().
		Vector v = new Vector();
		for(Iterator en = ids.iterator(); en.hasNext(); ){
			String elt = (String)en.next();
			INote retElt = getNote(elt);
			if(retElt != null){
				v.addElement(retElt);
			}
		}
		return v;
	}	
	
	public void addActor(edu.uci.isr.xarch.uml212superstructure.IActor newActor){
		if(!(newActor instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newActor).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, ActivitydiagramsspecialConstants.NS_URI, ACTOR_ELT_NAME);
		((DOMBased)newActor).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"actor", newActor,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addActors(Collection actors){
		for(Iterator en = actors.iterator(); en.hasNext(); ){
			edu.uci.isr.xarch.uml212superstructure.IActor elt = (edu.uci.isr.xarch.uml212superstructure.IActor)en.next();
			addActor(elt);
		}
	}		
		
	public void clearActors(){
		//DOMUtils.removeChildren(elt, ActivitydiagramsspecialConstants.NS_URI, ACTOR_ELT_NAME);
		Collection coll = getAllActors();
		removeActors(coll);
	}
	
	public void removeActor(edu.uci.isr.xarch.uml212superstructure.IActor actorToRemove){
		if(!(actorToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, ActivitydiagramsspecialConstants.NS_URI, ACTOR_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)actorToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"actor", actorToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeActors(Collection actors){
		for(Iterator en = actors.iterator(); en.hasNext(); ){
			edu.uci.isr.xarch.uml212superstructure.IActor elt = (edu.uci.isr.xarch.uml212superstructure.IActor)en.next();
			removeActor(elt);
		}
	}
	
	public Collection getAllActors(){
		NodeList nl = DOMUtils.getChildren(elt, ActivitydiagramsspecialConstants.NS_URI, ACTOR_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((edu.uci.isr.xarch.uml212superstructure.IActor)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "Actor");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((edu.uci.isr.xarch.uml212superstructure.IActor)o);
					}
					catch(Exception e){
						edu.uci.isr.xarch.uml212superstructure.ActorImpl eltImpl = new edu.uci.isr.xarch.uml212superstructure.ActorImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					edu.uci.isr.xarch.uml212superstructure.ActorImpl eltImpl = new edu.uci.isr.xarch.uml212superstructure.ActorImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasActor(edu.uci.isr.xarch.uml212superstructure.IActor actorToCheck){
		Collection c = getAllActors();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			edu.uci.isr.xarch.uml212superstructure.IActor elt = (edu.uci.isr.xarch.uml212superstructure.IActor)en.next();
			if(elt.isEquivalent(actorToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasActors(Collection actorsToCheck){
		Vector v = new Vector();
		for(Iterator en = actorsToCheck.iterator(); en.hasNext(); ){
			edu.uci.isr.xarch.uml212superstructure.IActor elt = (edu.uci.isr.xarch.uml212superstructure.IActor)en.next();
			v.addElement(new Boolean(hasActor(elt)));
		}
		return v;
	}
		
	public boolean hasAllActors(Collection actorsToCheck){
		for(Iterator en = actorsToCheck.iterator(); en.hasNext(); ){
			edu.uci.isr.xarch.uml212superstructure.IActor elt = (edu.uci.isr.xarch.uml212superstructure.IActor)en.next();
			if(!hasActor(elt)){
				return false;
			}
		}
		return true;
	}
	public edu.uci.isr.xarch.uml212superstructure.IActor getActor(String id){
		NodeList nl = DOMUtils.getChildren(elt, ActivitydiagramsspecialConstants.NS_URI, ACTOR_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			
			edu.uci.isr.xarch.uml212superstructure.IActor el = new edu.uci.isr.xarch.uml212superstructure.ActorImpl((Element)nl.item(i));
			if(DOMUtils.objNullEq(id, el.getId())){
				Element domElt = (Element)nl.item(i);
				Object o = makeDerivedWrapper(domElt, "Actor");
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						return (edu.uci.isr.xarch.uml212superstructure.IActor)o;
					}
					catch(Exception e){}
				}
				el.setXArch(getXArch());
				return el;
			}
		}
		return null;
	}
	
	public Collection getActors(Collection ids){
		//If there is an ID that does not exist, it is simply ignored.
		//You can tell if this happened if ids.size() != returned collection.size().
		Vector v = new Vector();
		for(Iterator en = ids.iterator(); en.hasNext(); ){
			String elt = (String)en.next();
			edu.uci.isr.xarch.uml212superstructure.IActor retElt = getActor(elt);
			if(retElt != null){
				v.addElement(retElt);
			}
		}
		return v;
	}	
	
	public void addActivityDiagramReference(IExternalReference newActivityDiagramReference){
		if(!(newActivityDiagramReference instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		Element newChildElt = (Element)(((DOMBased)newActivityDiagramReference).getDOMNode());
		newChildElt = DOMUtils.cloneAndRename(newChildElt, ActivitydiagramsspecialConstants.NS_URI, ACTIVITY_DIAGRAM_REFERENCE_ELT_NAME);
		((DOMBased)newActivityDiagramReference).setDOMNode(newChildElt);

		synchronized(DOMUtils.getDOMLock(elt)){
			elt.appendChild(newChildElt);
			DOMUtils.order(elt, getSequenceOrder());
		}

		IXArch context = getXArch();
		if(context != null){
			context.fireXArchEvent(
				new XArchEvent(this, 
				XArchEvent.ADD_EVENT,
				XArchEvent.ELEMENT_CHANGED,
				"activityDiagramReference", newActivityDiagramReference,
				XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
			);
		}
	}
		
	public void addActivityDiagramReferences(Collection activityDiagramReferences){
		for(Iterator en = activityDiagramReferences.iterator(); en.hasNext(); ){
			IExternalReference elt = (IExternalReference)en.next();
			addActivityDiagramReference(elt);
		}
	}		
		
	public void clearActivityDiagramReferences(){
		//DOMUtils.removeChildren(elt, ActivitydiagramsspecialConstants.NS_URI, ACTIVITY_DIAGRAM_REFERENCE_ELT_NAME);
		Collection coll = getAllActivityDiagramReferences();
		removeActivityDiagramReferences(coll);
	}
	
	public void removeActivityDiagramReference(IExternalReference activityDiagramReferenceToRemove){
		if(!(activityDiagramReferenceToRemove instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot handle non-DOM-based xArch entities.");
		}
		NodeList nl = DOMUtils.getChildren(elt, ActivitydiagramsspecialConstants.NS_URI, ACTIVITY_DIAGRAM_REFERENCE_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			Node n = nl.item(i);
			if(n == ((DOMBased)activityDiagramReferenceToRemove).getDOMNode()){
				synchronized(DOMUtils.getDOMLock(elt)){
					elt.removeChild(n);
				}

				IXArch context = getXArch();
				if(context != null){
					context.fireXArchEvent(
						new XArchEvent(this, 
						XArchEvent.REMOVE_EVENT,
						XArchEvent.ELEMENT_CHANGED,
						"activityDiagramReference", activityDiagramReferenceToRemove,
						XArchUtils.getDefaultXArchImplementation().isContainedIn(xArch, this))
					);
				}

				return;
			}
		}
	}
	
	public void removeActivityDiagramReferences(Collection activityDiagramReferences){
		for(Iterator en = activityDiagramReferences.iterator(); en.hasNext(); ){
			IExternalReference elt = (IExternalReference)en.next();
			removeActivityDiagramReference(elt);
		}
	}
	
	public Collection getAllActivityDiagramReferences(){
		NodeList nl = DOMUtils.getChildren(elt, ActivitydiagramsspecialConstants.NS_URI, ACTIVITY_DIAGRAM_REFERENCE_ELT_NAME);
		int nlLength = nl.getLength();
		ArrayList v = new ArrayList(nlLength);
		IXArch de = getXArch();
		for(int i = 0; i < nlLength; i++){
			Element el = (Element)nl.item(i);
			boolean found = false;
			if(de != null){
				IXArchElement cachedXArchElt = de.getWrapper(el);
				if(cachedXArchElt != null){
					v.add((IExternalReference)cachedXArchElt);
					found = true;
				}
			}
			if(!found){
				Object o = makeDerivedWrapper(el, "ExternalReference");	
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)o));
						}
						v.add((IExternalReference)o);
					}
					catch(Exception e){
						ExternalReferenceImpl eltImpl = new ExternalReferenceImpl((Element)nl.item(i));
						eltImpl.setXArch(getXArch());
						if(de != null){
							de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
						}
						v.add(eltImpl);
					}
				}
				else{
					ExternalReferenceImpl eltImpl = new ExternalReferenceImpl((Element)nl.item(i));
					eltImpl.setXArch(getXArch());
					if(de != null){
						de.cacheWrapper(el, ((edu.uci.isr.xarch.IXArchElement)eltImpl));
					}
					v.add(eltImpl);
				}
			}
		}
		return v;
	}

	public boolean hasActivityDiagramReference(IExternalReference activityDiagramReferenceToCheck){
		Collection c = getAllActivityDiagramReferences();
		
		for(Iterator en = c.iterator(); en.hasNext(); ){
			IExternalReference elt = (IExternalReference)en.next();
			if(elt.isEquivalent(activityDiagramReferenceToCheck)){
				return true;
			}
		}
		return false;
	}
	
	public Collection hasActivityDiagramReferences(Collection activityDiagramReferencesToCheck){
		Vector v = new Vector();
		for(Iterator en = activityDiagramReferencesToCheck.iterator(); en.hasNext(); ){
			IExternalReference elt = (IExternalReference)en.next();
			v.addElement(new Boolean(hasActivityDiagramReference(elt)));
		}
		return v;
	}
		
	public boolean hasAllActivityDiagramReferences(Collection activityDiagramReferencesToCheck){
		for(Iterator en = activityDiagramReferencesToCheck.iterator(); en.hasNext(); ){
			IExternalReference elt = (IExternalReference)en.next();
			if(!hasActivityDiagramReference(elt)){
				return false;
			}
		}
		return true;
	}
	public IExternalReference getActivityDiagramReference(String id){
		NodeList nl = DOMUtils.getChildren(elt, ActivitydiagramsspecialConstants.NS_URI, ACTIVITY_DIAGRAM_REFERENCE_ELT_NAME);
		for(int i = 0; i < nl.getLength(); i++){
			
			IExternalReference el = new ExternalReferenceImpl((Element)nl.item(i));
			if(DOMUtils.objNullEq(id, el.getId())){
				Element domElt = (Element)nl.item(i);
				Object o = makeDerivedWrapper(domElt, "ExternalReference");
				if(o != null){
					try{
						((edu.uci.isr.xarch.IXArchElement)o).setXArch(getXArch());
						return (IExternalReference)o;
					}
					catch(Exception e){}
				}
				el.setXArch(getXArch());
				return el;
			}
		}
		return null;
	}
	
	public Collection getActivityDiagramReferences(Collection ids){
		//If there is an ID that does not exist, it is simply ignored.
		//You can tell if this happened if ids.size() != returned collection.size().
		Vector v = new Vector();
		for(Iterator en = ids.iterator(); en.hasNext(); ){
			String elt = (String)en.next();
			IExternalReference retElt = getActivityDiagramReference(elt);
			if(retElt != null){
				v.addElement(retElt);
			}
		}
		return v;
	}	
	
	public boolean isEquivalent(IActivityDiagram c){
		return
			super.isEquivalent(c) &&
			hasAllNotes(c.getAllNotes()) &&
			c.hasAllNotes(getAllNotes()) &&
			hasAllActors(c.getAllActors()) &&
			c.hasAllActors(getAllActors()) &&
			hasAllActivityDiagramReferences(c.getAllActivityDiagramReferences()) &&
			c.hasAllActivityDiagramReferences(getAllActivityDiagramReferences()) ;
	}

}
