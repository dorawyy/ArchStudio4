/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.licenselookup;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * LicenseType <code>xsi:type</code> in the
 * licenselookup namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface ILicenseType extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"licenselookup", "LicenseType", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("name", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("reference", "instance", "XMLLink", 1, 1),
			XArchPropertyMetadata.createElement("obligation", "licenselookup", "Obligation", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("right", "licenselookup", "Right", 0, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the name for this LicenseType.
	 * @param value new name
	 */
	public void setName(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the name from this LicenseType.
	 */
	public void clearName();

	/**
	 * Get the name from this LicenseType.
	 * @return name
	 */
	public edu.uci.isr.xarch.instance.IDescription getName();

	/**
	 * Determine if this LicenseType has the given name
	 * @param nameToCheck name to compare
	 * @return <code>true</code> if the names are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasName(edu.uci.isr.xarch.instance.IDescription nameToCheck);

	/**
	 * Set the reference for this LicenseType.
	 * @param value new reference
	 */
	public void setReference(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the reference from this LicenseType.
	 */
	public void clearReference();

	/**
	 * Get the reference from this LicenseType.
	 * @return reference
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getReference();

	/**
	 * Determine if this LicenseType has the given reference
	 * @param referenceToCheck reference to compare
	 * @return <code>true</code> if the references are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasReference(edu.uci.isr.xarch.instance.IXMLLink referenceToCheck);

	/**
	 * Add a obligation to this LicenseType.
	 * @param newObligation obligation to add.
	 */
	public void addObligation(IObligation newObligation);

	/**
	 * Add a collection of obligations to this LicenseType.
	 * @param obligations obligations to add.
	 */
	public void addObligations(Collection obligations);

	/**
	 * Remove all obligations from this LicenseType.
	 */
	public void clearObligations();

	/**
	 * Remove the given obligation from this LicenseType.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param obligationToRemove obligation to remove.
	 */
	public void removeObligation(IObligation obligationToRemove);

	/**
	 * Remove all the given obligations from this LicenseType.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param obligations obligation to remove.
	 */
	public void removeObligations(Collection obligations);

	/**
	 * Get all the obligations from this LicenseType.
	 * @return all obligations in this LicenseType.
	 */
	public Collection getAllObligations();

	/**
	 * Determine if this LicenseType contains a given obligation.
	 * @return <code>true</code> if this LicenseType contains the given
	 * obligationToCheck, <code>false</code> otherwise.
	 */
	public boolean hasObligation(IObligation obligationToCheck);

	/**
	 * Determine if this LicenseType contains the given set of obligations.
	 * @param obligationsToCheck obligations to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>obligations</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasObligations(Collection obligationsToCheck);

	/**
	 * Determine if this LicenseType contains each element in the 
	 * given set of obligations.
	 * @param obligationsToCheck obligations to check for.
	 * @return <code>true</code> if every element in
	 * <code>obligations</code> is found in this LicenseType,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllObligations(Collection obligationsToCheck);

	/**
	 * Gets the obligation from this LicenseType with the given
	 * id.
	 * @param id ID to look for.
	 * @return obligation with the given ID, or <code>null</code> if not found.
	 */
	public IObligation getObligation(String id);

	/**
	 * Gets the obligations from this LicenseType with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return obligations with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getObligations(Collection ids);


	/**
	 * Add a right to this LicenseType.
	 * @param newRight right to add.
	 */
	public void addRight(IRight newRight);

	/**
	 * Add a collection of rights to this LicenseType.
	 * @param rights rights to add.
	 */
	public void addRights(Collection rights);

	/**
	 * Remove all rights from this LicenseType.
	 */
	public void clearRights();

	/**
	 * Remove the given right from this LicenseType.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param rightToRemove right to remove.
	 */
	public void removeRight(IRight rightToRemove);

	/**
	 * Remove all the given rights from this LicenseType.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param rights right to remove.
	 */
	public void removeRights(Collection rights);

	/**
	 * Get all the rights from this LicenseType.
	 * @return all rights in this LicenseType.
	 */
	public Collection getAllRights();

	/**
	 * Determine if this LicenseType contains a given right.
	 * @return <code>true</code> if this LicenseType contains the given
	 * rightToCheck, <code>false</code> otherwise.
	 */
	public boolean hasRight(IRight rightToCheck);

	/**
	 * Determine if this LicenseType contains the given set of rights.
	 * @param rightsToCheck rights to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>rights</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasRights(Collection rightsToCheck);

	/**
	 * Determine if this LicenseType contains each element in the 
	 * given set of rights.
	 * @param rightsToCheck rights to check for.
	 * @return <code>true</code> if every element in
	 * <code>rights</code> is found in this LicenseType,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllRights(Collection rightsToCheck);

	/**
	 * Gets the right from this LicenseType with the given
	 * id.
	 * @param id ID to look for.
	 * @return right with the given ID, or <code>null</code> if not found.
	 */
	public IRight getRight(String id);

	/**
	 * Gets the rights from this LicenseType with the given
	 * ids.
	 * @param ids ID to look for.
	 * @return rights with the given IDs.  If an element with a given
	 * ID was not found, that ID is ignored.
	 */
	public Collection getRights(Collection ids);

	/**
	 * Determine if another LicenseType is equivalent to this one, ignoring
	 * ID's.
	 * @param LicenseTypeToCheck LicenseType to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * LicenseType are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(ILicenseType LicenseTypeToCheck);

}
