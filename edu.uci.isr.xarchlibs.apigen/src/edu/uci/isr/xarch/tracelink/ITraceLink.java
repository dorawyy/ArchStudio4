/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.tracelink;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * TraceLink <code>xsi:type</code> in the
 * tracelink namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface ITraceLink extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"tracelink", "TraceLink", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("traceLinkID", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createElement("description", "instance", "Description", 0, 1),
			XArchPropertyMetadata.createElement("traceLinkRelationship", "tracelink", "TraceLinkRelationship", 0, 1),
			XArchPropertyMetadata.createElement("traceEndpoint", "tracelink", "TraceEndpoint", 2, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the traceLinkID attribute on this TraceLink.
	 * @param traceLinkID traceLinkID
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setTraceLinkID(String traceLinkID);

	/**
	 * Remove the traceLinkID attribute from this TraceLink.
	 */
	public void clearTraceLinkID();

	/**
	 * Get the traceLinkID attribute from this TraceLink.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return traceLinkID on this TraceLink
	 */
	public String getTraceLinkID();

	/**
	 * Determine if the traceLinkID attribute on this TraceLink
	 * has the given value.
	 * @param traceLinkID Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasTraceLinkID(String traceLinkID);


	/**
	 * Set the description for this TraceLink.
	 * @param value new description
	 */
	public void setDescription(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the description from this TraceLink.
	 */
	public void clearDescription();

	/**
	 * Get the description from this TraceLink.
	 * @return description
	 */
	public edu.uci.isr.xarch.instance.IDescription getDescription();

	/**
	 * Determine if this TraceLink has the given description
	 * @param descriptionToCheck description to compare
	 * @return <code>true</code> if the descriptions are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasDescription(edu.uci.isr.xarch.instance.IDescription descriptionToCheck);

	/**
	 * Set the traceLinkRelationship for this TraceLink.
	 * @param value new traceLinkRelationship
	 */
	public void setTraceLinkRelationship(ITraceLinkRelationship value);

	/**
	 * Clear the traceLinkRelationship from this TraceLink.
	 */
	public void clearTraceLinkRelationship();

	/**
	 * Get the traceLinkRelationship from this TraceLink.
	 * @return traceLinkRelationship
	 */
	public ITraceLinkRelationship getTraceLinkRelationship();

	/**
	 * Determine if this TraceLink has the given traceLinkRelationship
	 * @param traceLinkRelationshipToCheck traceLinkRelationship to compare
	 * @return <code>true</code> if the traceLinkRelationships are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasTraceLinkRelationship(ITraceLinkRelationship traceLinkRelationshipToCheck);

	/**
	 * Add a traceEndpoint to this TraceLink.
	 * @param newTraceEndpoint traceEndpoint to add.
	 */
	public void addTraceEndpoint(ITraceEndpoint newTraceEndpoint);

	/**
	 * Add a collection of traceEndpoints to this TraceLink.
	 * @param traceEndpoints traceEndpoints to add.
	 */
	public void addTraceEndpoints(Collection<ITraceEndpoint> traceEndpoints);

	/**
	 * Remove all traceEndpoints from this TraceLink.
	 */
	public void clearTraceEndpoints();

	/**
	 * Remove the given traceEndpoint from this TraceLink.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param traceEndpointToRemove traceEndpoint to remove.
	 */
	public void removeTraceEndpoint(ITraceEndpoint traceEndpointToRemove);

	/**
	 * Remove all the given traceEndpoints from this TraceLink.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param traceEndpoints traceEndpoint to remove.
	 */
	public void removeTraceEndpoints(Collection<ITraceEndpoint> traceEndpoints);

	/**
	 * Get all the traceEndpoints from this TraceLink.
	 * @return all traceEndpoints in this TraceLink.
	 */
	public Collection<ITraceEndpoint> getAllTraceEndpoints();

	/**
	 * Determine if this TraceLink contains a given traceEndpoint.
	 * @return <code>true</code> if this TraceLink contains the given
	 * traceEndpointToCheck, <code>false</code> otherwise.
	 */
	public boolean hasTraceEndpoint(ITraceEndpoint traceEndpointToCheck);

	/**
	 * Determine if this TraceLink contains the given set of traceEndpoints.
	 * @param traceEndpointsToCheck traceEndpoints to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>traceEndpoints</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection<Boolean> hasTraceEndpoints(Collection<ITraceEndpoint> traceEndpointsToCheck);

	/**
	 * Determine if this TraceLink contains each element in the 
	 * given set of traceEndpoints.
	 * @param traceEndpointsToCheck traceEndpoints to check for.
	 * @return <code>true</code> if every element in
	 * <code>traceEndpoints</code> is found in this TraceLink,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllTraceEndpoints(Collection<ITraceEndpoint> traceEndpointsToCheck);

	/**
	 * Determine if another TraceLink is equivalent to this one, ignoring
	 * ID's.
	 * @param TraceLinkToCheck TraceLink to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * TraceLink are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(ITraceLink TraceLinkToCheck);

}
