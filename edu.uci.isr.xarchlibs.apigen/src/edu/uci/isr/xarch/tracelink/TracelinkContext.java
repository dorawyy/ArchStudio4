/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.tracelink;

import java.util.*;

import edu.uci.isr.xarch.*;

import org.w3c.dom.*;

import edu.uci.isr.xarch.IXArch;

/**
 * The context object for the tracelink package.
 * This object is used to create objects that are used
 * in the tracelink namespace.
 *
 * @author Automatically Generated by xArch apigen
 */
public class TracelinkContext implements ITracelinkContext {

	protected static final String DEFAULT_ELT_NAME = "anonymousInstanceTag";
	protected Document doc;
	protected IXArch xArch;

	/**
	 * Create a new TracelinkContext for the given
	 * IXArch object.
	 * @param xArch XArch object to contextualize in this namespace.
	 */
	public TracelinkContext(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Node docRootNode = ((DOMBased)xArch).getDOMNode();
		synchronized(DOMUtils.getDOMLock(docRootNode)){
			this.doc = docRootNode.getOwnerDocument();
			xArch.addSchemaLocation("http://www.ics.uci.edu/pub/arch/xArch/tracelink.xsd", "http://acts.ics.uci.edu/tracelink/tracelink.xsd");
			this.xArch = xArch;
		}
	}

	public IXArch getXArch(){
		return xArch;
	}
	
	protected Element createElement(String name){
		synchronized(DOMUtils.getDOMLock(doc)){
			return doc.createElementNS(TracelinkConstants.NS_URI, name);
		}
	}

	public XArchTypeMetadata getTypeMetadata(){
		return ITracelinkContext.TYPE_METADATA;
	}
	/**
	 * Create an IStatusSimple object in this namespace.
	 * @return New IStatusSimple object.
	 */
	public IStatusSimple createStatusSimple(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, StatusSimpleImpl.XSD_TYPE_NSURI, StatusSimpleImpl.XSD_TYPE_NAME);
		StatusSimpleImpl newElt = new StatusSimpleImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IStatusSimple object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IStatusSimple recontextualizeStatusSimple(IStatusSimple value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IDateTimeStamp object in this namespace.
	 * @return New IDateTimeStamp object.
	 */
	public IDateTimeStamp createDateTimeStamp(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, DateTimeStampImpl.XSD_TYPE_NSURI, DateTimeStampImpl.XSD_TYPE_NAME);
		DateTimeStampImpl newElt = new DateTimeStampImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IDateTimeStamp object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IDateTimeStamp recontextualizeDateTimeStamp(IDateTimeStamp value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ICaptureModeSimple object in this namespace.
	 * @return New ICaptureModeSimple object.
	 */
	public ICaptureModeSimple createCaptureModeSimple(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, CaptureModeSimpleImpl.XSD_TYPE_NSURI, CaptureModeSimpleImpl.XSD_TYPE_NAME);
		CaptureModeSimpleImpl newElt = new CaptureModeSimpleImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ICaptureModeSimple object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ICaptureModeSimple recontextualizeCaptureModeSimple(ICaptureModeSimple value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IArchTraceLinks object in this namespace.
	 * @return New IArchTraceLinks object.
	 */
	public IArchTraceLinks createArchTraceLinks(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ArchTraceLinksImpl.XSD_TYPE_NSURI, ArchTraceLinksImpl.XSD_TYPE_NAME);
		ArchTraceLinksImpl newElt = new ArchTraceLinksImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IArchTraceLinks object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IArchTraceLinks recontextualizeArchTraceLinks(IArchTraceLinks value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ITraceLink object in this namespace.
	 * @return New ITraceLink object.
	 */
	public ITraceLink createTraceLink(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, TraceLinkImpl.XSD_TYPE_NSURI, TraceLinkImpl.XSD_TYPE_NAME);
		TraceLinkImpl newElt = new TraceLinkImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ITraceLink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ITraceLink recontextualizeTraceLink(ITraceLink value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IDescription object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IDescription object.
	 */
	public edu.uci.isr.xarch.instance.IDescription createDescription(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.DescriptionImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.DescriptionImpl newElt = new edu.uci.isr.xarch.instance.DescriptionImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IDescription object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IDescription recontextualizeDescription(edu.uci.isr.xarch.instance.IDescription value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ITraceEndpoint object in this namespace.
	 * @return New ITraceEndpoint object.
	 */
	public ITraceEndpoint createTraceEndpoint(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, TraceEndpointImpl.XSD_TYPE_NSURI, TraceEndpointImpl.XSD_TYPE_NAME);
		TraceEndpointImpl newElt = new TraceEndpointImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ITraceEndpoint object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ITraceEndpoint recontextualizeTraceEndpoint(ITraceEndpoint value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an edu.uci.isr.xarch.instance.IXMLLink object in this namespace.
	 * @return New edu.uci.isr.xarch.instance.IXMLLink object.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink createXMLLink(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, edu.uci.isr.xarch.instance.XMLLinkImpl.XSD_TYPE_NSURI, edu.uci.isr.xarch.instance.XMLLinkImpl.XSD_TYPE_NAME);
		edu.uci.isr.xarch.instance.XMLLinkImpl newElt = new edu.uci.isr.xarch.instance.XMLLinkImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an edu.uci.isr.xarch.instance.IXMLLink object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public edu.uci.isr.xarch.instance.IXMLLink recontextualizeXMLLink(edu.uci.isr.xarch.instance.IXMLLink value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ITraceLinkRelationship object in this namespace.
	 * @return New ITraceLinkRelationship object.
	 */
	public ITraceLinkRelationship createTraceLinkRelationship(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, TraceLinkRelationshipImpl.XSD_TYPE_NSURI, TraceLinkRelationshipImpl.XSD_TYPE_NAME);
		TraceLinkRelationshipImpl newElt = new TraceLinkRelationshipImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ITraceLinkRelationship object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ITraceLinkRelationship recontextualizeTraceLinkRelationship(ITraceLinkRelationship value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IStatus object in this namespace.
	 * @return New IStatus object.
	 */
	public IStatus createStatus(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, StatusImpl.XSD_TYPE_NSURI, StatusImpl.XSD_TYPE_NAME);
		StatusImpl newElt = new StatusImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IStatus object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IStatus recontextualizeStatus(IStatus value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IAuthor object in this namespace.
	 * @return New IAuthor object.
	 */
	public IAuthor createAuthor(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, AuthorImpl.XSD_TYPE_NSURI, AuthorImpl.XSD_TYPE_NAME);
		AuthorImpl newElt = new AuthorImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IAuthor object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IAuthor recontextualizeAuthor(IAuthor value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ITimeStamp object in this namespace.
	 * @return New ITimeStamp object.
	 */
	public ITimeStamp createTimeStamp(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, TimeStampImpl.XSD_TYPE_NSURI, TimeStampImpl.XSD_TYPE_NAME);
		TimeStampImpl newElt = new TimeStampImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ITimeStamp object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ITimeStamp recontextualizeTimeStamp(ITimeStamp value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an ICaptureMode object in this namespace.
	 * @return New ICaptureMode object.
	 */
	public ICaptureMode createCaptureMode(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, CaptureModeImpl.XSD_TYPE_NSURI, CaptureModeImpl.XSD_TYPE_NAME);
		CaptureModeImpl newElt = new CaptureModeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an ICaptureMode object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public ICaptureMode recontextualizeCaptureMode(ICaptureMode value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create an IActionType object in this namespace.
	 * @return New IActionType object.
	 */
	public IActionType createActionType(){
		Element elt = createElement(DEFAULT_ELT_NAME);
		DOMUtils.addXSIType(elt, ActionTypeImpl.XSD_TYPE_NSURI, ActionTypeImpl.XSD_TYPE_NAME);
		ActionTypeImpl newElt = new ActionTypeImpl(elt);
		newElt.setXArch(this.getXArch());
		return newElt;
	}

	/**
	 * Brings an IActionType object created in another
	 * context into this context.
	 * @param value Object to recontextualize.
	 * @return <code>value</code> object in this namespace.
	 */
	public IActionType recontextualizeActionType(IActionType value){
		if(!(value instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Element elt = (Element)((DOMBased)value).getDOMNode();

		elt = DOMUtils.cloneAndRename(elt, doc, TracelinkConstants.NS_URI, elt.getLocalName());
		//elt = DOMUtils.cloneAndRename(elt, TracelinkConstants.NS_URI, elt.getTagName());

		//Removed next line because it causes an illegal character DOM exception
		//elt.setPrefix(null);

		((DOMBased)value).setDOMNode(elt);
		((IXArchElement)value).setXArch(this.getXArch());
		return value;
	}

	/**
	 * Create a top-level element of type <code>IArchTraceLinks</code>.
	 * This function should be used in lieu of <code>createArchTraceLinks</code>
	 * if the element is to be added as a sub-object of <code>IXArch</code>.
	 * @return new IArchTraceLinks suitable for adding
	 * as a child of xArch.
	 */
	public IArchTraceLinks createArchTraceLinksElement(){
		Element elt = createElement("archTraceLinks");
		DOMUtils.addXSIType(elt, ArchTraceLinksImpl.XSD_TYPE_NSURI, 
			ArchTraceLinksImpl.XSD_TYPE_NAME);
		ArchTraceLinksImpl newElt = new ArchTraceLinksImpl(elt);

		IXArch de = getXArch();
		newElt.setXArch(de);
		return newElt;
	}

	/**
	 * Gets the IArchTraceLinks child from the given <code>IXArch</code>
	 * element.  If there are multiple matching children, this returns the first one.
	 * @param xArch <code>IXArch</code> object from which to get the child.
	 * @return <code>IArchTraceLinks</code> that is the child
	 * of <code>xArch</code> or <code>null</code> if no such object exists.
	 */
	public IArchTraceLinks getArchTraceLinks(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IArchTraceLinks){
				return (IArchTraceLinks)o;
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(TracelinkConstants.NS_URI))){
						if((localName != null) && (localName.equals("archTraceLinks"))){
							ArchTraceLinksImpl newElt = new ArchTraceLinksImpl(elt);
							newElt.setXArch(this.getXArch());
							return newElt;
						}
					}
				}
			}
		}
		return null;
	}

	/**
	 * Gets all the IArchTraceLinks children from the given 
	 * <code>IXArch</code> element.
	 * @param xArch <code>IXArch</code> object from which to get the children.
	 * @return Collection of <code>IArchTraceLinks</code> that are 	
	 * the children of <code>xArch</code> or an empty collection if no such object exists.
	 */
	public Collection<IArchTraceLinks> getAllArchTraceLinkss(IXArch xArch){
		if(!(xArch instanceof DOMBased)){
			throw new IllegalArgumentException("Cannot process non-DOM based xArch entities.");
		}
		Collection elementCollection = xArch.getAllObjects();
		Vector<IArchTraceLinks> v = new Vector<IArchTraceLinks>();

		for(Iterator en = elementCollection.iterator(); en.hasNext(); ){
			Object o = en.next();
			if(o instanceof IArchTraceLinks){
				v.addElement((IArchTraceLinks) o);
			}
			else if(o instanceof Element){
				Element elt = (Element)o;
				synchronized(DOMUtils.getDOMLock(elt)){
					String nsURI = elt.getNamespaceURI();
					String localName = elt.getLocalName();
					if((nsURI != null) && (nsURI.equals(TracelinkConstants.NS_URI))){
						if((localName != null) && (localName.equals("archTraceLinks"))){
							ArchTraceLinksImpl newElt = new ArchTraceLinksImpl(elt);
							newElt.setXArch(this.getXArch());
							v.addElement(newElt);
						}
					}
				}
			}
		}
		return v;
	}

}

