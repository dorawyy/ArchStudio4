/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.tracelink;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * TraceEndpoint <code>xsi:type</code> in the
 * tracelink namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface ITraceEndpoint extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"tracelink", "TraceEndpoint", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createAttribute("traceEndpointID", "instance", "Identifier", null, null),
			XArchPropertyMetadata.createElement("location", "instance", "XMLLink", 1, 1),
			XArchPropertyMetadata.createElement("status", "tracelink", "Status", 0, 1),
			XArchPropertyMetadata.createElement("author", "tracelink", "Author", 0, 1),
			XArchPropertyMetadata.createElement("timeStamp", "tracelink", "TimeStamp", 1, 1),
			XArchPropertyMetadata.createElement("captureMode", "tracelink", "CaptureMode", 0, 1),
			XArchPropertyMetadata.createElement("actionType", "tracelink", "ActionType", 0, XArchPropertyMetadata.UNBOUNDED),
			XArchPropertyMetadata.createElement("traceLink", "tracelink", "TraceLink", 0, 1)},
		new XArchActionMetadata[]{});

	/**
	 * Set the traceEndpointID attribute on this TraceEndpoint.
	 * @param traceEndpointID traceEndpointID
	 * @exception FixedValueException if the attribute has a fixed value
	 * and the value passed is not the fixed value.
	*/
	public void setTraceEndpointID(String traceEndpointID);

	/**
	 * Remove the traceEndpointID attribute from this TraceEndpoint.
	 */
	public void clearTraceEndpointID();

	/**
	 * Get the traceEndpointID attribute from this TraceEndpoint.
	 * if the attribute has a fixed value, this function will
	 * return that fixed value, even if it is not actually present
	 * in the XML document.
	 * @return traceEndpointID on this TraceEndpoint
	 */
	public String getTraceEndpointID();

	/**
	 * Determine if the traceEndpointID attribute on this TraceEndpoint
	 * has the given value.
	 * @param traceEndpointID Attribute value to compare
	 * @return <code>true</code> if they match; <code>false</code>
	 * otherwise.
	 */
	public boolean hasTraceEndpointID(String traceEndpointID);


	/**
	 * Set the location for this TraceEndpoint.
	 * @param value new location
	 */
	public void setLocation(edu.uci.isr.xarch.instance.IXMLLink value);

	/**
	 * Clear the location from this TraceEndpoint.
	 */
	public void clearLocation();

	/**
	 * Get the location from this TraceEndpoint.
	 * @return location
	 */
	public edu.uci.isr.xarch.instance.IXMLLink getLocation();

	/**
	 * Determine if this TraceEndpoint has the given location
	 * @param locationToCheck location to compare
	 * @return <code>true</code> if the locations are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasLocation(edu.uci.isr.xarch.instance.IXMLLink locationToCheck);

	/**
	 * Set the status for this TraceEndpoint.
	 * @param value new status
	 */
	public void setStatus(IStatus value);

	/**
	 * Clear the status from this TraceEndpoint.
	 */
	public void clearStatus();

	/**
	 * Get the status from this TraceEndpoint.
	 * @return status
	 */
	public IStatus getStatus();

	/**
	 * Determine if this TraceEndpoint has the given status
	 * @param statusToCheck status to compare
	 * @return <code>true</code> if the statuss are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasStatus(IStatus statusToCheck);

	/**
	 * Set the author for this TraceEndpoint.
	 * @param value new author
	 */
	public void setAuthor(IAuthor value);

	/**
	 * Clear the author from this TraceEndpoint.
	 */
	public void clearAuthor();

	/**
	 * Get the author from this TraceEndpoint.
	 * @return author
	 */
	public IAuthor getAuthor();

	/**
	 * Determine if this TraceEndpoint has the given author
	 * @param authorToCheck author to compare
	 * @return <code>true</code> if the authors are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasAuthor(IAuthor authorToCheck);

	/**
	 * Set the timeStamp for this TraceEndpoint.
	 * @param value new timeStamp
	 */
	public void setTimeStamp(ITimeStamp value);

	/**
	 * Clear the timeStamp from this TraceEndpoint.
	 */
	public void clearTimeStamp();

	/**
	 * Get the timeStamp from this TraceEndpoint.
	 * @return timeStamp
	 */
	public ITimeStamp getTimeStamp();

	/**
	 * Determine if this TraceEndpoint has the given timeStamp
	 * @param timeStampToCheck timeStamp to compare
	 * @return <code>true</code> if the timeStamps are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasTimeStamp(ITimeStamp timeStampToCheck);

	/**
	 * Set the captureMode for this TraceEndpoint.
	 * @param value new captureMode
	 */
	public void setCaptureMode(ICaptureMode value);

	/**
	 * Clear the captureMode from this TraceEndpoint.
	 */
	public void clearCaptureMode();

	/**
	 * Get the captureMode from this TraceEndpoint.
	 * @return captureMode
	 */
	public ICaptureMode getCaptureMode();

	/**
	 * Determine if this TraceEndpoint has the given captureMode
	 * @param captureModeToCheck captureMode to compare
	 * @return <code>true</code> if the captureModes are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasCaptureMode(ICaptureMode captureModeToCheck);

	/**
	 * Add a actionType to this TraceEndpoint.
	 * @param newActionType actionType to add.
	 */
	public void addActionType(IActionType newActionType);

	/**
	 * Add a collection of actionTypes to this TraceEndpoint.
	 * @param actionTypes actionTypes to add.
	 */
	public void addActionTypes(Collection<IActionType> actionTypes);

	/**
	 * Remove all actionTypes from this TraceEndpoint.
	 */
	public void clearActionTypes();

	/**
	 * Remove the given actionType from this TraceEndpoint.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param actionTypeToRemove actionType to remove.
	 */
	public void removeActionType(IActionType actionTypeToRemove);

	/**
	 * Remove all the given actionTypes from this TraceEndpoint.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param actionTypes actionType to remove.
	 */
	public void removeActionTypes(Collection<IActionType> actionTypes);

	/**
	 * Get all the actionTypes from this TraceEndpoint.
	 * @return all actionTypes in this TraceEndpoint.
	 */
	public Collection<IActionType> getAllActionTypes();

	/**
	 * Determine if this TraceEndpoint contains a given actionType.
	 * @return <code>true</code> if this TraceEndpoint contains the given
	 * actionTypeToCheck, <code>false</code> otherwise.
	 */
	public boolean hasActionType(IActionType actionTypeToCheck);

	/**
	 * Determine if this TraceEndpoint contains the given set of actionTypes.
	 * @param actionTypesToCheck actionTypes to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>actionTypes</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection<Boolean> hasActionTypes(Collection<IActionType> actionTypesToCheck);

	/**
	 * Determine if this TraceEndpoint contains each element in the 
	 * given set of actionTypes.
	 * @param actionTypesToCheck actionTypes to check for.
	 * @return <code>true</code> if every element in
	 * <code>actionTypes</code> is found in this TraceEndpoint,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllActionTypes(Collection<IActionType> actionTypesToCheck);


	/**
	 * Set the traceLink for this TraceEndpoint.
	 * @param value new traceLink
	 */
	public void setTraceLink(ITraceLink value);

	/**
	 * Clear the traceLink from this TraceEndpoint.
	 */
	public void clearTraceLink();

	/**
	 * Get the traceLink from this TraceEndpoint.
	 * @return traceLink
	 */
	public ITraceLink getTraceLink();

	/**
	 * Determine if this TraceEndpoint has the given traceLink
	 * @param traceLinkToCheck traceLink to compare
	 * @return <code>true</code> if the traceLinks are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasTraceLink(ITraceLink traceLinkToCheck);
	/**
	 * Determine if another TraceEndpoint is equivalent to this one, ignoring
	 * ID's.
	 * @param TraceEndpointToCheck TraceEndpoint to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * TraceEndpoint are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(ITraceEndpoint TraceEndpointToCheck);

}
